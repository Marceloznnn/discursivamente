{% extends 'layouts/base.twig' %}

{% block title %}
  {{ entry.getTitle() ?: 'Material' }} – {{ module.getTitle() }}
{% endblock %}

{% block styles %}
  <link rel="stylesheet" href="/assets/css/pages/curso/aluno/material.css">
  <style>
    /* Container principal do PDF */
    #pdf-viewer-container {
      width: 100%;
      height: 85vh;
      margin-bottom: 1.5rem;
      border: 1px solid #e0e0e0;
      border-radius: 8px;
      overflow: hidden;
      background: #f8f9fa;
      position: relative;
    }

    /* Iframe do PDF */
    #pdf-viewer {
      width: 100%;
      height: 100%;
      border: none;
      background: white;
    }

    /* Fallback para navegadores que não suportam PDFs inline */
    .pdf-fallback {
      display: none;
      text-align: center;
      padding: 2rem;
      background: #f8f9fa;
      border: 2px dashed #dee2e6;
      border-radius: 8px;
      margin: 1rem 0;
    }

    .pdf-fallback.show {
      display: block;
    }

    .pdf-fallback h3 {
      color: #6c757d;
      margin-bottom: 1rem;
    }

    .pdf-fallback p {
      color: #868e96;
      margin-bottom: 1.5rem;
    }

    /* Botões de ação */
    .pdf-actions {
      display: flex;
      gap: 0.5rem;
      margin-bottom: 1rem;
      flex-wrap: wrap;
    }

    .pdf-action-btn {
      padding: 0.5rem 1rem;
      border: 1px solid #dee2e6;
      background: white;
      color: #495057;
      text-decoration: none;
      border-radius: 4px;
      font-size: 0.875rem;
      transition: all 0.2s;
    }    .pdf-action-btn:hover {
      background: #f8f9fa;
      border-color: #adb5bd;
    }
    
    .pdf-action-btn-primary {
      background-color: #007bff !important;
      color: white !important;
      font-weight: 500 !important;
      cursor: pointer !important;
    }
    
    .pdf-action-btn-primary:hover {
      background-color: #0069d9 !important;
      border-color: #0062cc !important;
    }/* Loading spinner */
    .pdf-loading {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      display: none; /* Inicialmente oculto até o usuário clicar para carregar */
      flex-direction: column;
      align-items: center;
      z-index: 10;
    }

    .spinner {
      width: 40px;
      height: 40px;
      border: 4px solid #f3f3f3;
      border-top: 4px solid #007bff;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .pdf-loading p {
      margin-top: 1rem;
      color: #6c757d;
      font-size: 0.875rem;
    }

    /* Responsividade */
    @media (max-width: 768px) {
      #pdf-viewer-container {
        height: 70vh;
      }
      
      .pdf-actions {
        justify-content: center;
      }
    }

    /* Estilo para materiais não-PDF */
    #material-image {
      max-width: 100%;
      height: auto;
      border-radius: 8px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }    #material-video {
      width: 100%;
      max-height: 80vh;
      border-radius: 8px;
      max-width: 100%;
    }

    #material-download {
      display: inline-block;
      padding: 1rem 2rem;
      background: #007bff;
      color: white;
      text-decoration: none;
      border-radius: 8px;
      font-weight: 500;
      transition: background 0.2s;
    }

    #material-download:hover {
      background: #0056b3;
    }
  </style>
{% endblock %}

{% block content %}
  <div id="material-container"
       data-course-id="{{ course.getId() }}"
       data-module-id="{{ module.getId() }}">
    
    <nav class="breadcrumb" aria-label="Breadcrumb">
      <ol>
        <li><a href="/courses">Cursos</a></li>
        <li><a href="/courses/{{ course.getId() }}">{{ course.getTitle() }}</a></li>
        <li><a href="/courses/{{ course.getId() }}/modules">Módulos</a></li>
        <li class="current">{{ entry.getTitle() ?: 'Material' }}</li>
      </ol>
    </nav>

    <div class="header">
      <h1 id="material-title">{{ entry.getTitle() ?: 'Material #' ~ entry.getId() }}</h1>
    </div>

    <div id="material-content" class="skeleton" data-entry-id="{{ entry.getId() }}">
      {% set url = entry.getContentUrl() %}
      {% set type = entry.getContentTypeRobusto() %}

      {% if type == 'image' %}
        <img src="{{ url }}" alt="{{ entry.getTitle() }}" id="material-image" />      {% elseif type == 'video' %}
        <video controls id="material-video" src="{{ url }}">
          <source src="{{ url }}" type="video/mp4">
          Seu navegador não suporta a reprodução de vídeos.
        </video>      {% elseif type == 'pdf' or ((type == 'raw' or type == '' or type is null) and (url|lower ends with '.pdf' or 'cloudinary.com/raw/' in url or 'cloudinary.com' in url)) %}
        <div id="pdf-viewer-container">
          <iframe id="pdf-viewer" src="https://docs.google.com/viewer?url={{ url|url_encode }}&embedded=true" allowfullscreen data-pdf-url="{{ url }}"></iframe>
          <div id="pdf-loading" class="pdf-loading">
            <div class="spinner"></div>
            <p>Carregando PDF...</p>
          </div>
          <div id="pdf-fallback" class="pdf-fallback">
            <h3>Não foi possível exibir o PDF</h3>
            <p>Seu navegador não suporta visualização inline. <a href="{{ url }}" target="_blank">Clique aqui para abrir em nova aba</a>.</p>
          </div>
        </div>        <div class="pdf-actions">
          <a href="{{ url }}" target="_blank" class="pdf-action-btn" style="background-color: #007bff; color: white; font-weight: 500;" data-pdf-url="{{ url }}" data-open-as="viewer">Abrir em nova aba</a>
          <a href="{{ url }}" download class="pdf-action-btn">Baixar PDF</a>
          <button type="button" class="pdf-action-btn" onclick="toggleFullscreen()">Tela cheia</button>
        </div>

      {% else %}
        <a href="{{ url }}" id="material-download" download>⬇️ Baixar Arquivo</a>
      {% endif %}
    </div>

    <div class="actions">
      <button id="toggle-complete-btn" class="pdf-action-btn pdf-action-btn-primary" style="margin-top: 1.5rem;">
        Carregando...
      </button>
      {% if nextEntry %}
        <a href="/courses/{{ course.getId() }}/modules/{{ module.getId() }}/material/{{ nextEntry.getId() }}" 
           id="material-next" class="btn-outline">
          Próximo &rarr;
        </a>
      {% endif %}
      <a href="/courses/{{ course.getId() }}/modules" id="material-back" class="btn-secondary">
        &larr; Voltar para Módulos
      </a>
    </div>
  </div>
{% endblock %}

{% block scripts %}
  <script src="/assets/js/utils/advanced-uploader.js"></script>
  <script src="/assets/js/utils/upload-init.js"></script>
  <script>
    // Logger simples para debug
    const PDFLogger = {
      info: function(msg, data = null) { console.log(`[PDF-INFO] ${msg}`, data ? JSON.stringify(data) : ''); },
      error: function(msg, error = null) { console.error(`[PDF-ERROR] ${msg}`, error ? JSON.stringify(error) : ''); },
      warn: function(msg, data = null) { console.warn(`[PDF-WARN] ${msg}`, data ? JSON.stringify(data) : ''); }
    };

    // Função para marcar qualquer material como concluído
    function markMaterialAsComplete() {
      try {
        const container = document.querySelector('#material-container');
        const contentDiv = document.querySelector('#material-content');
        if (container && contentDiv) {
          const courseId = container.dataset.courseId;
          const moduleId = container.dataset.moduleId;
          const entryId = contentDiv.dataset.entryId;
          if (courseId && moduleId && entryId) {
            PDFLogger.info('Marcando material como concluído');
            fetch(`/courses/${courseId}/modules/${moduleId}/complete`, {
              method: 'POST',
              headers: {'Content-Type': 'application/json'},
              body: JSON.stringify({ entryId: parseInt(entryId, 10) })
            })
            .then(response => {
              if (response.ok) {
                PDFLogger.info('Material marcado como concluído com sucesso');
                // Atualiza barra de progresso do curso na página principal (iframe ou não)
                if (window.parent && window.parent.updateCourseProgress) {
                  window.parent.updateCourseProgress();
                } else if (window.updateCourseProgress) {
                  window.updateCourseProgress();
                }
              } else {
                PDFLogger.error('Falha ao marcar material como concluído');
              }
            })
            .catch(e => PDFLogger.error('Erro ao marcar material como concluído', { error: e.message }));
          }
        }
      } catch (e) {
        PDFLogger.error('Erro ao processar conclusão do material', { error: e.message });
      }
    }

    // Função para atualizar o botão de progresso
    function updateToggleButton(isCompleted) {
      const btn = document.getElementById('toggle-complete-btn');
      if (!btn) return;
      if (isCompleted) {
        btn.textContent = 'Desmarcar como concluído';
        btn.classList.add('completed');
      } else {
        btn.textContent = 'Marcar como concluído';
        btn.classList.remove('completed');
      }
    }

    // Função para buscar o estado atual do progresso
    function fetchProgressState() {
      const container = document.getElementById('material-container');
      const entryId = document.getElementById('material-content').dataset.entryId;
      fetch(`/user/progress/toggle/${entryId}`, {
        method: 'GET',
        headers: { 'X-Requested-With': 'XMLHttpRequest' }
      })
      .then(r => r.json())
      .then(data => {
        updateToggleButton(data.completed === true);
      })
      .catch(() => updateToggleButton(false));
    }

    // Função para marcar/desmarcar material
    function toggleMaterialComplete() {
      const container = document.getElementById('material-container');
      const entryId = document.getElementById('material-content').dataset.entryId;
      fetch(`/user/progress/toggle/${entryId}`, {
        method: 'POST',
        headers: { 'X-Requested-With': 'XMLHttpRequest' }
      })
      .then(r => r.json())
      .then(data => {
        updateToggleButton(data.completed === true);
        // Atualiza barra de progresso do curso
        if (window.parent && window.parent.updateCourseProgress) {
          window.parent.updateCourseProgress();
        } else if (window.updateCourseProgress) {
          window.updateCourseProgress();
        }
      });
    }

    document.addEventListener('DOMContentLoaded', () => {
      PDFLogger.info('Página carregada');
      // Marcar progresso automaticamente ao abrir qualquer material
      markMaterialAsComplete();

      // PDF: configurar eventos de carregamento e fallback
      const pdfViewer = document.getElementById('pdf-viewer');
      if (pdfViewer) {
        const loadingElement = document.getElementById('pdf-loading');
        if (loadingElement) loadingElement.style.display = 'flex';
        pdfViewer.style.display = 'block';
        pdfViewer.onload = function() {
          PDFLogger.info('PDF carregado no iframe via Google Viewer');
          if (loadingElement) loadingElement.style.display = 'none';
        };
        pdfViewer.onerror = function() {
          PDFLogger.error('Erro ao carregar PDF no Google Viewer');
          if (loadingElement) loadingElement.style.display = 'none';
          const fallback = document.getElementById('pdf-fallback');
          if (fallback) fallback.classList.add('show');
        };
      }
      // Botão tela cheia
      window.toggleFullscreen = function() {
        const container = document.getElementById('pdf-viewer-container');
        if (!container) return;
        try {
          if (!document.fullscreenElement) {
            container.requestFullscreen();
          } else {
            document.exitFullscreen();
          }
        } catch (err) {
          PDFLogger.error('Erro ao alternar tela cheia', err);
        }
      };
      document.addEventListener('fullscreenchange', () => {
        const container = document.getElementById('pdf-viewer-container');
        if (container) {
          container.style.height = document.fullscreenElement ? '100vh' : '85vh';
        }
      });
      // Estado inicial do botão de conclusão
      fetchProgressState();
      const btn = document.getElementById('toggle-complete-btn');
      if (btn) {
        btn.addEventListener('click', function() {
          toggleMaterialComplete();
        });
      }
    });
  </script>
{% endblock %}